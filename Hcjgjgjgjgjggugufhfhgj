            border-color: #667eea;
            background: #f8f9ff;
        }

        .trait-option.selected {
            border-color: #667eea;
            background: #667eea;
            color: white;
            transform: scale(1.05);
        }

        .btn {
            padding: 15px 30px;
            border: none;
            border-radius: 12px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-block;
            text-decoration: none;
            text-align: center;
            margin: 10px 5px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 15px 30px rgba(102, 126, 234, 0.4);
        }

        .btn-secondary {
            background: white;
            color: #667eea;
            border: 2px solid #667eea;
        }

        .btn-secondary:hover {
            background: #667eea;
            color: white;
            transform: translateY(-2px);
        }

        .role-display {
            text-align: center;
            padding: 30px;
            border-radius: 15px;
            margin: 20px 0;
        }

        .secret-role {
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
            color: white;
        }

        .            flex: 1;
            padding: 12px;
            border: 1px solid #e1e5e9;
            border-radius: 25px;
            margin-right: 10px;
        }

        .chat-input button {
            padding: 12px 20px;
            border: none;
            border-radius: 25px;
            background: #667eea;
            color: white;
            cursor: pointer;
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: #667eea;
        }

        .loading::after {
            content: '';
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            display: inline-block;
            margin-left: 10px;
        }

        /* NEW LOGIN STYLES */
        .login-section {
            text-align: center;
            margin: 20px 0;
            padding: 20px;
            border-top: 2px solid #e1e5e9;
        }

        .login-form {
            display: inline-block;
            background: #f8f9ff;
            padding: 20px;
            border-radius: 12px;
            margin-top: 10px;
        }

        .login-form input {
            width: 200px;
            margin: 5px;
            padding: 10px;
            border: 1px solid #e1e5e9;
            border-radius: 8px;
        }

        .status-indicator {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background: #4CAF50;
            margin-left: 10px;
            animation: pulse 2s infinite;
        }

        .debug-info {
            background: #f0f0f0;
            padding: 10px;
            border-radius: 8px;
            margin: 10px 0;
            font-size: 0.9rem;
            color: #666;
        }

        .gender-indicator {
            display: inline-block;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.8rem;
            margin-left: 8px;
        }

        .gender-male {
            background: #e3f2fd;
            color: #1976d2;
        }

        .gender-female {
            background: #fce4ec;
            color: #c2185b;
        }

        .gender-other {
            background: #f3e5f5;
            color: #7b1fa2;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @keyframes pulse {
            0% {
                transform: scale(0.95);
                box-shadow: 0 0 0 0 rgba(76, 175, 80, 0.7);
            }
            70% {
                transform: scale(1);
                box-shadow: 0 0 0 10px rgba(76, 175, 80, 0);
            }
            100% {
                transform: scale(0.95);
                box-shadow: 0 0 0 0 rgba(76, 175, 80, 0);
            }
        }

        @keyframes fadeInDown {
            from {
                opacity: 0;
                transform: translateY(-50px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(50px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes slideInUp {
            from {
                opacity: 0;
                transform: translateY(100px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .card {
                padding: 20px;
            }
            
            .personality-traits {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Secret Connect</h1>
            <p>Where mystery meets connection - Find your secret friend!</p>
        </div>

        <!-- Welcome Screen with Login -->
        <div id="welcome-screen" class="screen active">
            <div class="card">
                <h2 style="text-align: center; margin-bottom: 20px; color: #667eea;">Welcome to Secret Connect!</h2>
                <p style="text-align: center; margin-bottom: 30px; font-size: 1.1rem; line-height: 1.6;">
                    Connect with your classmates in a unique way! One of you will know who you're talking to, 
                    while the other gets to solve the mystery. Ready for an exciting conversation?
                </p>
                <div style="text-align: center;">
                    <button class="btn btn-primary" onclick="showRegisterScreen()">New User - Register</button>
                </div>
                
                <!-- LOGIN SECTION -->
                <div class="login-section">
                    <h4 style="color: #667eea; margin-bottom: 15px;">Already have an account?</h4>
                    <div class="login-form" id="login-form">
                        <input type="text" id="login-id" placeholder="Your ID (e.g., SC001)" style="display: block;">
                        <input type="password" id="login-password" placeholder="Password" style="display: block;">
                        <button class="btn btn-secondary" onclick="loginUser()" style="margin-top: 10px;">Login</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Registration Screen with Login Fields -->
        <div id="register-screen" class="screen">
            <div class="card">
                <h2 style="text-align: center; margin-bottom: 30px; color: #667eea;">Join the Community</h2>
                <form id="registration-form">
                    <div class="form-group">
                        <label for="name">Full Name</label>
                        <input type="text" id="name" required placeholder="Enter your full name">
                    </div>

                    <div class="form-group">
                        <label for="user-id">Your ID</label>
                        <input type="text" id="user-id" readonly style="background: #f0f0f0; color: #666;" placeholder="Auto-generated">
                    </div>

                    <div class="form-group">
                        <label for="password">Create Password</label>
                        <input type="password" id="password" required placeholder="Choose a secure password" minlength="4">
                    </div>

                    <div class="form-group">
                        <label for="dob">Date of Birth</label>
                        <input type="date" id="dob" required>
                    </div>

                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                        <div class="form-group">
                            <label for="class">Class</label>
                            <select id="class" required>
                                <option value="">Select Class</option>
                                <option value="9th">9th Grade</option>
                                <option value="10th">10th Grade</option>
                                <option value="11th">11th Grade</option>
                                <option value="12th">12th Grade</option>
                                <option value="1st-year">1st Year College</option>
                                <option value="2nd-year">2nd Year College</option>
                                <option value="3rd-year">3rd Year College</option>
                                <option value="4th-year">4th Year College</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="section">Section</label>
                            <select id="section" required>
                                <option value="">Select Section</option>
                                <option value="A">Section A</option>
                                <option value="B">Section B</option>
                                <option value="C">Section C</option>
                                <option value="D">Section D</option>
                            </select>
                        </div>
                    </div>

                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                        <div class="form-group">
                            <label for="gender">Gender</label>
                            <select id="gender" required>
                                <option value="">Select Gender</option>
                                <option value="male">Male</option>
                                <option value="female">Female</option>
                                <option value="other">Other</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="roll">Roll Number (Optional)</label>
                            <input type="text" id="roll" placeholder="Your roll number">
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Your Personality (Select all that apply)</label>
                        <div class="personality-traits">
                            <div class="trait-option" data-trait="shy">😊 Shy</div>
                            <div class="trait-option" data-trait="listener">👂 Good Listener</div>
                            <div class="trait-option" data-trait="talkative">💬 Talkative</div>
                            <div class="trait-option" data-trait="creative">🎨 Creative</div>
                            <div class="trait-option" data-trait="funny">😄 Funny</div>
                            <div class="trait-option" data-trait="serious">🤔 Serious</div>
                        </div>
                    </div>

                    <div style="text-align: center; margin-top: 30px;">
                        <button type="submit" class="btn btn-primary">Register Now</button>
                        <button type="button" class="btn btn-secondary" onclick="showScreen('welcome-screen')">Back</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Role Display Screen -->
        <div id="role-screen" class="screen">
            <div class="card">
                <div id="role-display"></div>
                <!-- DEBUG INFO -->
                <div id="debug-info" class="debug-info" style="display: none;"></div>
                <div style="text-align: center; margin-top: 30px;">
                    <button id="continue-btn" class="btn btn-primary">Continue</button>
                </div>
            </div>
        </div>

        <!-- User Selection Screen -->
        <div id="selection-screen" class="screen">
            <div class="card">
                <h2 style="text-align: center; margin-bottom: 20px; color: #667eea;" id="selection-title"></h2>
                <p style="text-align: center; margin-bottom: 30px;" id="selection-subtitle"></p>
                <div id="user-list" class="user-list"></div>
                <div style="text-align: center; margin-top: 30px;">
                    <button id="select-btn" class="btn btn-primary" disabled>Confirm Selection</button>
                    <p style="margin-top: 10px; color: #666;" id="selection-count"></p>
                </div>
            </div>
        </div>

        <!-- Matching Screen -->
        <div id="matching-screen" class="screen">
            <div class="card">
                <div class="loading">
                    <h3>Finding your perfect match...</h3>
                    <p>Please wait while we connect you with someone special!</p>
                </div>
            </div>
        </div>

        <!-- Chat Screen -->
        <div id="chat-screen" class="screen">
            <div class="card">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                    <div>
                        <h3 id="chat-title">Secret Chat</h3>
                        <p id="chat-subtitle" style="color: #666;"></p>
                    </div>
                    <div>
                        <button class="btn btn-secondary" onclick="logout()" style="margin-right: 10px;">Logout</button>
                        <button class="btn btn-secondary" onclick="reconnect()">Reconnect</button>
                    </div>
                </div>
                
                <div class="chat-container">
                    <div id="chat-messages" class="chat-messages"></div>
                    <div class="chat-input">
                        <input type="text" id="message-input" placeholder="Type your message..." maxlength="200">
                        <button onclick="sendMessage()">Send</button>
                    </div>
                </div>
                
                <div style="text-align: center; margin-top: 15px; font-size: 0.9rem; color: #666;">
                    <span id="online-status">Connecting...<span class="status-indicator"></span></span>
                </div>
            </div>
        </div>
    </div>

    <!-- Firebase SDK -->
    <script type="module">
        import { initializeApp } from 'https://www.gstatic.com/firebasejs/9.15.0/firebase-app.js';
        import { getDatabase, ref, push, set, onValue, off, remove, get, child } from 'https://www.gstatic.com/firebasejs/9.15.0/firebase-database.js';

        // Firebase configuration
        const firebaseConfig = {
            apiKey: "AIzaSyCyVWf_fLoI_HwG5F2NYt5uE9R2cG4hgaU",
            authDomain: "project1-2cf89.firebaseapp.com",
            databaseURL: "https://project1-2cf89-default-rtdb.asia-southeast1.firebasedatabase.app",
            projectId: "project1-2cf89",
            storageBucket: "project1-2cf89.firebasestorage.app",
            messagingSenderId: "402123727736",
            appId: "1:402123727736:web:28171277785a809dd55e8d"
        };

        const app = initializeApp(firebaseConfig);
        const database = getDatabase(app);

        // Global variables
        let currentUser = null;
        let selectedTraits = [];
        let selectedUsers = [];
        let currentMatch = null;
        let chatListener = null;

        // Make functions global
        window.showScreen = showScreen;
        window.showRegisterScreen = showRegisterScreen;
        window.loginUser = loginUser;
        window.logout = logout;
        window.reconnect = reconnect;
        window.sendMessage = sendMessage;

        // AUTO-LOGIN CHECK ON PAGE LOAD
        window.addEventListener('load', function() {
            const savedUser = localStorage.getItem('secretConnectUser');
            if (savedUser) {
                try {
                    currentUser = JSON.parse(savedUser);
                    checkUserStatus();
                } catch (e) {
                    localStorage.removeItem('secretConnectUser');
                }
            }
        });

        // Screen management
        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(screen => {
                screen.classList.remove('active');
            });
            document.getElementById(screenId).classList.add('active');
        }

        // Show register screen and generate ID
        async function showRegisterScreen() {
            await generateNextId();
            showScreen('register-screen');
        }

        // GENERATE NEXT AVAILABLE ID
        async function generateNextId() {
            const usersRef = ref(database, 'users');
            const snapshot = await get(usersRef);
            
            let maxId = 0;
            if (snapshot.exists()) {
                const users = Object.values(snapshot.val());
                users.forEach(user => {
                    if (user.userId) {
                        const idNum = parseInt(user.userId.replace('SC', ''));
                        if (idNum > maxId) maxId = idNum;
                    }
                });
            }
            
            const nextId = `SC${String(maxId + 1).padStart(3, '0')}`;
            document.getElementById('user-id').value = nextId;
            return nextId;
        }

        // LOGIN FUNCTION
        async function loginUser() {
            const userId = document.getElementById('login-id').value.trim().toUpperCase();
            const password = document.getElementById('login-password').value.trim();
            
            if (!userId || !password) {
                alert('Please enter both ID and password');
                return;
            }
            
            try {
                const usersRef = ref(database, 'users');
                const snapshot = await get(usersRef);
                
                if (snapshot.exists()) {
                    const users = snapshot.val();
                    const userEntry = Object.entries(users).find(([id, user]) => 
                        user.userId === userId && user.password === password
                    );
                    
                    if (userEntry) {
                        currentUser = { ...userEntry[1], id: userEntry[0] };
                        localStorage.setItem('secretConnectUser', JSON.stringify(currentUser));
                        await checkUserStatus();
                    } else {
                        alert('Invalid ID or password');
                    }
                } else {
                    alert('No users found');
                }
            } catch (error) {
                alert('Login failed. Please try again.');
                console.error('Login error:', error);
            }
        }

        // CHECK USER STATUS (active chat or new role)
        async function checkUserStatus() {
            try {
                // Check for active matches
                const matchesRef = ref(database, 'matches');
                const snapshot = await get(matchesRef);
                
                if (snapshot.exists()) {
                    const matches = Object.entries(snapshot.val());
                    const userMatch = matches.find(([id, match]) => 
                        (match.user1 === currentUser.id || match.user2 === currentUser.id) && match.active
                    );
                    
                    if (userMatch) {
                        const matchData = userMatch[1];
                        const partnerId = matchData.user1 === currentUser.id ? matchData.user2 : matchData.user1;
                        const partner = await getUserById(partnerId);
                        
                        currentMatch = {
                            id: userMatch[0],
                            ...matchData,
                            partner: partner
                        };
                        
                        // Set user role based on match data
                        currentUser.isSecretFriend = matchData.secretFriend === currentUser.id;
                        
                        startChat();
                        return;
                    }
                }
                
                // No active match, assign new role
                await assignSmartRole();
            } catch (error) {
                console.error('Check status error:', error);
                await assignSmartRole();
            }
        }

        // GENDER-AWARE COMPATIBILITY CHECK
        function isGenderCompatible(user1, user2) {
            // Only allow cross-gender connections (male <-> female)
            // Users with "other" gender can connect with anyone
            if (user1.gender === 'other' || user2.gender === 'other') {
                return true;
            }
            
            return (user1.gender === 'male' && user2.gender === 'female') || 
                   (user1.gender === 'female' && user2.gender === 'male');
        }

        // FIXED SMART ROLE ASSIGNMENT WITH GENDER AWARENESS
        async function assignSmartRole() {
            try {
                const usersRef = ref(database, 'users');
                const snapshot = await get(usersRef);
                
                let shouldBeSecret = false; // Start with non-secret as default
                
                if (snapshot.exists()) {
                    const users = Object.entries(snapshot.val())
                        .map(([id, user]) => ({ ...user, id }));
                    
                    // Filter for gender-compatible users only
                    const compatibleUsers = users.filter(user => 
                        user.id !== currentUser.id && isGenderCompatible(currentUser, user)
                    );
                    
                    const totalCompatible = compatibleUsers.length;
                    
                    if (totalCompatible === 0) {
                        // No compatible users, assign random role
                        shouldBeSecret = Math.random() < 0.4;
                    } else if (totalCompatible === 1) {
                        // Only one compatible user, balance roles
                        shouldBeSecret = Math.random() < 0.5;
                    } else {
                        // Count compatible users by their roles
                        let secretCount = 0;
                        let nonSecretCount = 0;
                        
                        compatibleUsers.forEach(user => {
                            if (user.currentRole === 'secret') {
                                secretCount++;
                            } else if (user.currentRole === 'non-secret') {
                                nonSecretCount++;
                            }
                        });
                        
                        const assignedCompatible = secretCount + nonSecretCount;
                        
                        if (assignedCompatible === 0) {
                            // No compatible users with assigned roles yet
                            shouldBeSecret = Math.random() < 0.4;
                        } else {
                            const secretRatio = secretCount / assignedCompatible;
                            
                            // Debug info for compatible users
                            console.log(`Gender-aware role assignment:`, {
                                currentUserGender: currentUser.gender,
                                totalUsers: users.length,
                                compatibleUsers: totalCompatible,
                                secretCount,
                                nonSecretCount,
                                assignedCompatible,
                                secretRatio
                            });
                            
                            // Target: 40% secret friends, 60% non-secret among compatible users
                            if (secretRatio < 0.3) {
                                shouldBeSecret = Math.random() < 0.7; // Favor secret
                            } else if (secretRatio > 0.5) {
                                shouldBeSecret = Math.random() < 0.2; // Favor non-secret
                            } else {
                                shouldBeSecret = Math.random() < 0.4; // Target ratio
                            }
                        }
                    }
                } else {
                    // Very first user ever
                    shouldBeSecret = Math.random() < 0.4;
                }
                
                currentUser.isSecretFriend = shouldBeSecret;
                currentUser.currentRole = shouldBeSecret ? 'secret' : 'non-secret';
                
                // Update role in database
                await set(ref(database, `users/${currentUser.id}/currentRole`), currentUser.currentRole);
                
                // Update localStorage
                localStorage.setItem('secretConnectUser', JSON.stringify(currentUser));
                
                displayRole();
            } catch (error) {
                console.error('Role assignment error:', error);
                // Fallback to random with slight bias toward non-secret
                currentUser.isSecretFriend = Math.random() < 0.3;
                currentUser.currentRole = currentUser.isSecretFriend ? 'secret' : 'non-secret';
                displayRole();
            }
        }

        // Get user by ID helper
        async function getUserById(userId) {
            try {
                const userRef = ref(database, `users/${userId}`);
                const snapshot = await get(userRef);
                return snapshot.exists() ? { ...snapshot.val(), id: userId } : null;
            } catch (error) {
                console.error('Get user error:', error);
                return null;
            }
        }

        // LOGOUT FUNCTION
        function logout() {
            if (confirm('Are you sure you want to logout?')) {
                localStorage.removeItem('secretConnectUser');
                currentUser = null;
                currentMatch = null;
                
                if (chatListener) {
                    off(ref(database, `chats/${currentMatch?.id}/messages`), 'value', chatListener);
                    chatListener = null;
                }
                
                showScreen('welcome-screen');
            }
        }

        // Personality trait selection
        document.querySelectorAll('.trait-option').forEach(option => {
            option.addEventListener('click', function() {
                const trait = this.dataset.trait;
                if (this.classList.contains('selected')) {
                    this.classList.remove('selected');
                    selectedTraits = selectedTraits.filter(t => t !== trait);
                } else {
                    this.classList.add('selected');
                    selectedTraits.push(trait);
                }
            });
        });

        // GENDER INDICATOR HELPER
        function getGenderIndicator(gender) {
            const indicators = {
                male: '<span class="gender-indicator gender-male">♂ Male</span>',
                female: '<span class="gender-indicator gender-female">♀ Female</span>',
                other: '<span class="gender-indicator gender-other">⚧ Other</span>'
            };
            return indicators[gender] || '';
        }

        // UPDATED REGISTRATION FORM
        document.getElementById('registration-form').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const userId = document.getElementById('user-id').value;
            const password = document.getElementById('password').value;
            
            if (selectedTraits.length === 0) {
                alert('Please select at least one personality trait');
                return;
            }
            
            const formData = {
                userId: userId,
                password: password,
                name: document.getElementById('name').value,
                dob: document.getElementById('dob').value,
                class: document.getElementById('class').value,
                section: document.getElementById('section').value,
                gender: document.getElementById('gender').value,
                roll: document.getElementById('roll').value,
                traits: selectedTraits,
                timestamp: Date.now()
            };

            try {
                // Check for duplicate ID
                const usersRef = ref(database, 'users');
                const snapshot = await get(usersRef);
                
                if (snapshot.exists()) {
                    const users = snapshot.val();
                    const duplicateId = Object.values(users).find(user => user.userId === userId);
                    
                    if (duplicateId) {
                        alert('This ID already exists! Please refresh to get a new ID.');
                        await generateNextId();
                        return;
                    }
                }

                // Save user
                const newUserRef = push(ref(database, 'users'));
                currentUser = { ...formData, id: newUserRef.key };
                await set(newUserRef, formData);
                
                // Save to localStorage
                localStorage.setItem('secretConnectUser', JSON.stringify(currentUser));

                // Smart role assignment with gender awareness
                await assignSmartRole();
            } catch (error) {
                alert('Registration failed. Please try again.');
                console.error('Registration error:', error);
            }
        });

        function displayRole() {
            const roleDisplay = document.getElementById('role-display');
            
            if (currentUser.isSecretFriend) {
                roleDisplay.innerHTML = `
                    <div class="role-display secret-role">
                        <h2>🕵️ You are a Secret Friend!</h2>
                        <p>You'll get to choose someone you like from our curated list. They won't know who you are, but you can express your feelings freely!</p>
                        <p style="margin-top: 15px; opacity: 0.9;"><strong>Note:</strong> You'll only see people of compatible gender for meaningful connections.</p>
                    </div>
                `;
            } else {
                roleDisplay.innerHTML = `
                    <div class="role-display non-secret-role">
                        <h2>🔍 You're the Mystery Solver!</h2>
                        <p>Someone has chosen you as their secret friend! Select 5 people you'd like to connect with, and we'll reveal one of them as your mystery friend.</p>
                        <p style="margin-top: 15px; opacity: 0.9;"><strong>Note:</strong> You'll only see people of compatible gender for meaningful connections.</p>
                    </div>
                `;
            }

            document.getElementById('continue-btn').onclick = () => {
                loadUserSelection();
            };

            showScreen('role-screen');
        }

        async function loadUserSelection() {
            const selectionTitle = document.getElementById('selection-title');
            const selectionSubtitle = document.getElementById('selection-subtitle');
            const userList = document.getElementById('user-list');

            try {
                // Get all users
                const usersRef = ref(database, 'users');
                const snapshot = await get(usersRef);
                
                if (!snapshot.exists()) {
                    alert('No other users found. Please try again later.');
                    return;
                }

                const allUsers = Object.entries(snapshot.val())
                    .map(([id, user]) => ({ ...user, id }))
                    .filter(user => user.id !== currentUser.id)
                    .filter(user => isGenderCompatible(currentUser, user)); // GENDER FILTER

                if (currentUser.isSecretFriend) {
                    // Show compatible users for secret friend to choose from
                    const availableUsers = allUsers.filter(user => {
                        const sameClass = user.class === currentUser.class;
                        const sharedTraits = user.traits ? user.traits.filter(trait => currentUser.traits.includes(trait)).length : 0;
                        return sameClass && sharedTraits > 0;
                    });

                    selectionTitle.textContent = 'Choose Your Secret Connection';
                    selectionSubtitle.textContent = 'Select someone you\'d like to connect with. They won\'t know it\'s you!';
                    
                    renderUserList(availableUsers, 1);

                } else {
                    // Show curated list for non-secret user to select 5 from
                    const curatedUsers = allUsers
                        .filter(user => {
                            const sameClass = user.class === currentUser.class;
                            const sharedTraits = user.traits ? user.traits.filter(trait => currentUser.traits.includes(trait)).length : 0;
                            return sameClass || sharedTraits > 0;
                        })
                        .sort(() => Math.random() - 0.5)
                        .slice(0, 20);

                    selectionTitle.textContent = 'Select Your Preferred Connections';
                    selectionSubtitle.textContent = 'Choose 5 people you\'d like to connect with. One of them will be your secret friend!';
                    
                    renderUserList(curatedUsers, 5);
                }

                showScreen('selection-screen');
            } catch (error) {
                console.error('Load selection error:', error);
                alert('Error loading users. Please try again.');
            }
        }

        function renderUserList(users, maxSelection) {
            const userList = document.getElementById('user-list');
            const selectBtn = document.getElementById('select-btn');
            const selectionCount = document.getElementById('selection-count');
            
            selectedUsers = [];
            userList.innerHTML = '';

            if (users.length === 0) {
                userList.innerHTML = `
                    <div style="text-align: center; color: #666; grid-column: 1 / -1;">
                        <h4>No compatible users found</h4>
                        <p>We couldn't find any users that match your criteria. This might be because:</p>
                        <ul style="text-align: left; display: inline-block; margin: 15px 0;">
                            <li>No users of compatible gender have registered yet</li>
                            <li>No users from your class/section are available</li>
                            <li>No users with similar interests are online</li>
                        </ul>
                        <p>Please try again later or ask more friends to join!</p>
                    </div>
                `;
                return;
            }

            users.forEach(user => {
                const userCard = document.createElement('div');
                userCard.className = 'user-card';
                userCard.innerHTML = `
                    <h4>${user.name} ${getGenderIndicator(user.gender)}</h4>
                    <p>Class: ${user.class} - ${user.section}</p>
                    <p>Traits: ${user.traits ? user.traits.join(', ') : 'No traits'}</p>
                `;
                
                userCard.addEventListener('click', () => {
                    if (userCard.classList.contains('selected')) {
                        userCard.classList.remove('selected');
                        selectedUsers = selectedUsers.filter(u => u.id !== user.id);
                    } else if (selectedUsers.length < maxSelection) {
                        userCard.classList.add('selected');
                        selectedUsers.push(user);
                    }
                    
                    updateSelectionUI(maxSelection);
                });
                
                userList.appendChild(userCard);
            });

            function updateSelectionUI(maxSelection) {
                selectBtn.disabled = selectedUsers.length === 0;
                selectionCount.textContent = `Selected: ${selectedUsers.length}/${maxSelection}`;
                
                if (selectedUsers.length === maxSelection || maxSelection === 1) {
                    selectBtn.textContent = 'Start Chatting!';
                }
            }

            selectBtn.onclick = () => {
                if (selectedUsers.length > 0) {
                    createMatch();
                }
            };

            updateSelectionUI(maxSelection);
        }

        async function createMatch() {
            showScreen('matching-screen');

            try {
                let matchedUser;
                
                if (currentUser.isSecretFriend) {
                    // Secret friend selected someone directly
                    matchedUser = selectedUsers[0];
                } else {
                    // Non-secret user selected 5, randomly pick 1
                    matchedUser = selectedUsers[Math.floor(Math.random() * selectedUsers.length)];
                }

                // Verify gender compatibility before creating match
                if (!isGenderCompatible(currentUser, matchedUser)) {
                    alert('Gender compatibility error. Please try again.');
                    showScreen('selection-screen');
                    return;
                }

                // Create match in database
                const matchRef = push(ref(database, 'matches'));
                const matchData = {
                    user1: currentUser.id,
                    user2: matchedUser.id,
                    secretFriend: currentUser.isSecretFriend ? currentUser.id : matchedUser.id,
                    timestamp: Date.now(),
                    active: true
                };

                await set(matchRef, matchData);
                
                currentMatch = {
                    id: matchRef.key,
                    ...matchData,
                    partner: matchedUser
                };

                // Simulate matching delay
                setTimeout(() => {
                    startChat();
                }, 2000);
            } catch (error) {
                console.error('Match creation error:', error);
                alert('Error creating match. Please try again.');
                showScreen('selection-screen');
            }
        }

        function startChat() {
            const chatTitle = document.getElementById('chat-title');
            const chatSubtitle = document.getElementById('chat-subtitle');

            if (currentUser.isSecretFriend) {
                chatTitle.innerHTML = `Chatting with ${currentMatch.partner.name} ${getGenderIndicator(currentMatch.partner.gender)}`;
                chatSubtitle.textContent = 'You are the secret friend - they don\'t know who you are!';
            } else {
                chatTitle.innerHTML = `Mystery Chat ${getGenderIndicator(currentMatch.partner.gender)}`;
                chatSubtitle.textContent = 'Try to guess who your secret friend is!';
            }

            // Start listening for messages
            listenForMessages();
            
            showScreen('chat-screen');
            
            // Update online status
            document.getElementById('online-status').innerHTML = 'Connected <span class="status-indicator"></span>';
        }

        function listenForMessages() {
            if (chatListener) {
                off(ref(database, `chats/${currentMatch.id}/messages`), 'value', chatListener);
            }

            const messagesRef = ref(database, `chats/${currentMatch.id}/messages`);
            
            chatListener = onValue(messagesRef, (snapshot) => {
                const messages = snapshot.val() || {};
                displayMessages(messages);
            });
        }

        function displayMessages(messages) {
            const chatMessages = document.getElementById('chat-messages');
            chatMessages.innerHTML = '';

            Object.values(messages).forEach(message => {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${message.senderId === currentUser.id ? 'sent' : 'received'}`;
                
                const time = new Date(message.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
                messageDiv.innerHTML = `
                    <div>${message.text}</div>
                    <small style="opacity: 0.7; font-size: 0.8rem;">${time}</small>
                `;
                
                chatMessages.appendChild(messageDiv);
            });

            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function sendMessage() {
            const messageInput = document.getElementById('message-input');
            const messageText = messageInput.value.trim();

            if (messageText && currentMatch) {
                try {
                    const messageRef = push(ref(database, `chats/${currentMatch.id}/messages`));
                    const messageData = {
                        senderId: currentUser.id,
                        text: messageText,
                        timestamp: Date.now()
                    };

                    set(messageRef, messageData);
                    messageInput.value = '';
                } catch (error) {
                    console.error('Send message error:', error);
                    alert('Failed to send message. Please try again.');
                }
            }
        }

        // Handle Enter key in message input
        document.getElementById('message-input').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        async function reconnect() {
            if (confirm('Are you sure you want to reconnect with someone new? This will end your current chat.')) {
                try {
                    // Clean up current chat listener
                    if (chatListener) {
                        off(ref(database, `chats/${currentMatch.id}/messages`), 'value', chatListener);
                        chatListener = null;
                    }
                    
                    // Mark current match as inactive
                    if (currentMatch) {
                        await set(ref(database, `matches/${currentMatch.id}/active`), false);
                    }

                    // Reset and restart process
                    currentMatch = null;
                    selectedUsers = [];
                    
                    // Assign new role with gender awareness
                    await assignSmartRole();
                } catch (error) {
                    console.error('Reconnect error:', error);
                    alert('Error during reconnect. Please refresh and try again.');
                }
            }
        }

        // Initialize the app
        console.log('Secret Connect initialized successfully with gender-aware matching!');
    </script>
</body>
</html>
